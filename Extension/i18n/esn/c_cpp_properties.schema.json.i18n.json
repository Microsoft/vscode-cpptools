/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.name": "Configuration identifier. Mac, Linux, and Win32 are special identifiers for configurations that will be auto-selected on those platforms, but the identifier can be anything.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerPath": "Full path of the compiler being used, e.g. /usr/bin/gcc, to enable more accurate IntelliSense.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compilerArgs": "Compiler arguments to modify the includes or defines used, e.g. -nostdinc++, -m32, etc.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cStandard": "Version of the C language standard to use for IntelliSense. Note: GNU standards are only used to query the set compiler to get GNU defines, and IntelliSense will emulate the equivalent C standard version.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.cppStandard": "Version of the C++ language standard to use for IntelliSense. Note: GNU standards are only used to query the set compiler to get GNU defines, and IntelliSense will emulate the equivalent C++ standard version.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.compileCommands": "Full path to compile_commands.json file for the workspace.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.includePath": "A list of paths for the IntelliSense engine to use while searching for included headers. Searching on these paths is not recursive. Specify '**' to indicate recursive search. For example, '${workspaceFolder}/**' will search through all subdirectories while '${workspaceFolder}' will not.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.macFrameworkPath": "A list of paths for the Intellisense engine to use while searching for included headers from Mac frameworks. Only supported on Mac configuration.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.windowsSdkVersion": "Version of the Windows SDK include path to use on Windows, e.g. '10.0.17134.0'.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.defines": "A list of preprocessor definitions for the IntelliSense engine to use while parsing files. Optionally, use = to set a value, e.g. VERSION=1.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.intelliSenseMode": "The IntelliSense mode to use that maps to a platform and architecture variant of MSVC, gcc, or Clang. If not set or if set to ${default}, the extension will choose the default for that platform. Windows defaults to windows-msvc-x64, Linux defaults to linux-gcc-x64, and macOS defaults to macos-clang-x64. IntelliSense modes that only specify <compiler>-<architecture> variants (e.g. gcc-x64) are legacy modes and are converted automatically to the <platform>-<compiler>-<architecture> variants based on the host platform.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.forcedInclude": "A list of files that should be included before any include file in a translation unit.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.configurationProvider": "The id of a VS Code extension that can provide IntelliSense configuration information for source files.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.limitSymbolsToIncludedHeaders": "true to process only those files directly or indirectly included as headers, false to process all files under the specified include paths.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.databaseFilename": "Path to the generated symbol database. If a relative path is specified, it will be made relative to the workspace's default storage location.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.browse.properties.path": "A list of paths to use for indexing and parsing of workspace symbols (for use by Go to Definition, Find All References, etc.). Searching on these paths is recursive by default. Specify '*' to indicate non-recursive search. For example, '${workspaceFolder}' will search through all subdirectories while '${workspaceFolder}/*' will not.",
	"c_cpp_properties.schema.json.definitions.configurations.items.properties.customConfigurationVariables": "Custom variables that can be queried through the command ${cpptools:activeConfigCustomVariable} to use for the input variables in launch.json or tasks.json.",
	"c_cpp_properties.schema.json.definitions.env": "Custom variables that can be reused anywhere in this file using the ${variable} or ${env:variable} syntax.",
	"c_cpp_properties.schema.json.definitions.version": "Version of the configuration file. This property is managed by the extension. Please do not change it.",
	"c_cpp_properties.schema.json.definitions.enableConfigurationSquiggles": "Controls whether the extension will report errors detected in c_cpp_properties.json."
}