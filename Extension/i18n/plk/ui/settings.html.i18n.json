/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"microsoft.c.cpp.extension": "Microsoft C/C++ Extension",
	"c.cpp.extension": "C/C++ Extension",
	"open.this.editor": "Open this editor by using the command:",
	"edit.configurations.ui": "C/C++: Edit configurations (UI)",
	"switch.to.json": "Switch to the {0} file by clicking on the file link or using the command:",
	"edit.configurations.in.json": "Edit configurations in JSON file",
	"edit.configurations.json": "C/C++: Edit configurations (JSON)",
	"check.the.schema": "Learn more about the C/C++ properties by going to {0}.",
	"view.schema.reference": "Properties Schema Reference",
	"intellisense.configurations": "IntelliSense Configurations",
	"intellisense.configurations.description": "Use this editor to edit IntelliSense settings defined in the underlying {0} file. Changes made in this editor only apply to the selected configuration. To edit multiple configurations at once go to {1}.",
	"configuration.name": "Configuration name",
	"configuration.name.description": "A friendly name that identifies a configuration. {0}, {1}, and {2} are special identifiers for configurations that will be auto-selected on those platforms.",
	"select.configuration.to.edit": "Select a configuration set to edit.",
	"add.configuration.button": "Add Configuration",
	"configuration.name.input": "Configuration name...",
	"ok.button": "OK",
	"cancel.button": "CANCEL",
	"compiler.path": "Compiler path",
	"compiler.path.description": "The full path to the compiler you use to build your project, e.g. {0}, to enable more accurate IntelliSense. The extension will query the compiler to determine the system include paths and default defines to use for IntelliSense.",
	"specify.a.compiler": "Specify a compiler path or select a detected compiler path from the drop-down list.",
	"no.compiler.paths.detected": "(No compiler paths detected)",
	"compiler.args": "Compiler arguments",
	"compiler.arguments": "Compiler arguments to modify the includes or defines used, e.g. {0}, {1}, etc.",
	"one.argument.per.line": "One argument per line.",
	"intellisense.mode": "IntelliSense mode",
	"intellisense.mode.description": "The IntelliSense mode to use that maps to a platform and architecture variant of MSVC, gcc, or Clang. If not set or if set to {0}, the extension will choose the default for that platform. Windows defaults to {1}, Linux defaults to {2}, and macOS defaults to {3}. Select a specific IntelliSense mode to override the {4} mode. IntelliSense modes that only specify {5} variants (e.g. {6}) are legacy modes and are converted automatically to the {7} variants based on the host platform.",
	"include.path": "Include path",
	"include.path.description": "An include path is a folder that contains header files (such as {0}) that are included in a source file. Specify a list of paths for the IntelliSense engine to use while searching for included header files. Searching on these paths is not recursive. Specify {1} to indicate recursive search. For example, {2} will search through all subdirectories while {3} will not.  If on Windows with Visual Studio installed, or if a compiler is specified in the {4} setting, it is not necessary to list the system include paths in this list.",
	"one.include.path.per.line": "One include path per line.",
	"defines": "Defines",
	"defines.description": "A list of preprocessor definitions for the IntelliSense engine to use while parsing files. Optionally, use {0} to set a value, e.g. {1}.",
	"one.definition.per.line": "One definition per line.",
	"c.standard": "C standard",
	"c.standard.description": "The version of the C language standard to use for IntelliSense. Note: GNU standards are only used to query the set compiler to get GNU defines, and IntelliSense will emulate the equivalent C standard version.",
	"cpp.standard": "C++ standard",
	"cpp.standard.description": "The version of the C++ language standard to use for IntelliSense. Note: GNU standards are only used to query the set compiler to get GNU defines, and IntelliSense will emulate the equivalent C++ standard version.",
	"advanced.settings": "Advanced Settings",
	"configuration.provider": "Configuration provider",
	"configuration.provider.description": "The ID of a VS Code extension that can provide IntelliSense configuration information for source files. For example, use the VS Code extension ID {0} to provide configuration information from the CMake Tools extension.",
	"windows.sdk.version": "Windows SDK version",
	"windows.sdk.version.description": "The version of the Windows SDK include path to use on Windows, e.g. {0}.",
	"mac.framework.path": "Mac framework path",
	"mac.framework.path.description": "A list of paths for the Intellisense engine to use while searching for included headers from Mac frameworks. Only supported on configurations for macOS.",
	"one.path.per.line": "One path per line.",
	"forced.include": "Forced include",
	"forced.include.description": "A list of files that should be included before any other characters in the source file are processed. Files are included in the order listed.",
	"one.file.per.line": "One file per line.",
	"compile.commands": "Compile commands",
	"compile.commands.description": "The full path to the {0} file for the workspace. The include paths and defines discovered in this file will be used instead of the values set for {1} and {2} settings. If the compile commands database does not contain an entry for the translation unit that corresponds to the file you opened in the editor, then a warning message will appear and the extension will use the {3} and {4} settings instead.",
	"browse.path": "Browse: path",
	"browse.path.description": "A list of paths for the Tag Parser to search for headers included by your source files. If omitted, {0} will be used as the {1}. Searching on these paths is recursive by default. Specify {2} to indicate non-recursive search. For example: {3} will search through all subdirectories while {4} will not.",
	"one.browse.path.per.line": "One browse path per line.",
	"limit.symbols": "Browse: limit symbols to included headers",
	"limit.symbols.checkbox": "When true (or checked), the Tag Parser will only parse code files that have been directly or indirectly included by a source file in {0}. When false (or not checked), the Tag Parser will parse all code files found in the paths specified in the {1} list.",
	"database.filename": "Browse: database filename",
	"database.filename.description": "The path to the generated symbol database. This instructs the extension to save the Tag Parser's symbol database somewhere other than the workspace's default storage location. If a relative path is specified, it will be made relative to the workspace's default storage location, not the workspace folder itself. The {0} variable can be used to specify a path relative to the workspace folder (e.g. {1})"
}