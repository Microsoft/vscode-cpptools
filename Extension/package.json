{
  "name": "cpptools",
  "displayName": "C/C++",
  "description": "C/C++ IntelliSense, debugging, and code browsing.",
  "version": "0.24.0-master",
  "publisher": "ms-vscode",
  "preview": true,
  "icon": "LanguageCCPP_color_128x.png",
  "readme": "README.md",
  "author": {
    "name": "Microsoft Corporation"
  },
  "license": "SEE LICENSE IN LICENSE.txt",
  "engines": {
    "vscode": "^1.30.0"
  },
  "bugs": {
    "url": "https://github.com/Microsoft/vscode-cpptools/issues",
    "email": "c_cpp_support@microsoft.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Microsoft/vscode-cpptools.git"
  },
  "homepage": "https://github.com/Microsoft/vscode-cpptools",
  "qna": "https://github.com/Microsoft/vscode-cpptools/issues",
  "keywords": [
    "C",
    "C++",
    "IntelliSense",
    "Microsoft",
    "multi-root ready"
  ],
  "categories": [
    "Programming Languages",
    "Debuggers",
    "Formatters",
    "Linters",
    "Snippets"
  ],
  "activationEvents": [
    "onLanguage:cpp",
    "onLanguage:c",
    "onCommand:extension.pickNativeProcess",
    "onCommand:extension.pickRemoteNativeProcess",
    "onCommand:C_Cpp.BuildAndDebugActiveFile",
    "onCommand:C_Cpp.ConfigurationEditJSON",
    "onCommand:C_Cpp.ConfigurationEditUI",
    "onCommand:C_Cpp.ConfigurationSelect",
    "onCommand:C_Cpp.ConfigurationProviderSelect",
    "onCommand:C_Cpp.SwitchHeaderSource",
    "onCommand:C_Cpp.Navigate",
    "onCommand:C_Cpp.GoToDeclaration",
    "onCommand:C_Cpp.PeekDeclaration",
    "onCommand:C_Cpp.EnableErrorSquiggles",
    "onCommand:C_Cpp.DisableErrorSquiggles",
    "onCommand:C_Cpp.ToggleIncludeFallback",
    "onCommand:C_Cpp.ToggleDimInactiveRegions",
    "onCommand:C_Cpp.ShowReleaseNotes",
    "onCommand:C_Cpp.ResetDatabase",
    "onCommand:C_Cpp.PauseParsing",
    "onCommand:C_Cpp.ResumeParsing",
    "onCommand:C_Cpp.ShowParsingCommands",
    "onCommand:C_Cpp.TakeSurvey",
    "onCommand:C_Cpp.LogDiagnostics",
    "onCommand:C_Cpp.RescanWorkspace",
    "onDebug",
    "workspaceContains:/.vscode/c_cpp_properties.json"
  ],
  "main": "./dist/main",
  "contributes": {
    "problemMatchers": [
      {
        "name": "gcc",
        "source": "gcc",
        "owner": "cpptools",
        "fileLocation": [
          "relative",
          "${workspaceFolder}"
        ],
        "pattern": {
          "regexp": "^(.*):(\\d+):(\\d+):\\s+(?:fatal\\s+)?(warning|error):\\s+(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        }
      }
    ],
    "configuration": {
      "type": "object",
      "title": "C/C++",
      "properties": {
        "C_Cpp.clang_format_path": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "%c_cpp.configuration.clang_format_path.description%",
          "scope": "machine"
        },
        "C_Cpp.clang_format_style": {
          "type": "string",
          "default": "file",
          "description": "c_cpp.configuration.clang_format_style.description",
          "scope": "resource"
        },
        "C_Cpp.clang_format_fallbackStyle": {
          "type": "string",
          "default": "Visual Studio",
          "description": "%c_cpp.configuration.clang_format_fallbackStyle.description%",
          "scope": "resource"
        },
        "C_Cpp.clang_format_sortIncludes": {
          "type": [
            "boolean",
            "null"
          ],
          "enum": [
            true,
            false,
            null
          ],
          "default": null,
          "description": "%c_cpp.configuration.clang_format_sortIncludes.description%",
          "scope": "resource"
        },
        "C_Cpp.intelliSenseEngine": {
          "type": "string",
          "enum": [
            "Default",
            "Tag Parser",
            "Disabled"
          ],
          "default": "Default",
          "description": "%c_cpp.configuration.intelliSenseEngine.description%",
          "scope": "resource"
        },
        "C_Cpp.intelliSenseEngineFallback": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "default": "Disabled",
          "description": "%c_cpp.configuration.intelliSenseEngineFallback.description%",
          "scope": "resource"
        },
        "C_Cpp.autocomplete": {
          "type": "string",
          "enum": [
            "Default",
            "Disabled"
          ],
          "default": "Default",
          "description": "%c_cpp.configuration.autocomplete.description%",
          "scope": "resource"
        },
        "C_Cpp.errorSquiggles": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled",
            "EnabledIfIncludesResolve"
          ],
          "default": "EnabledIfIncludesResolve",
          "description": "%c_cpp.configuration.errorSquiggles.description%",
          "scope": "resource"
        },
        "C_Cpp.dimInactiveRegions": {
          "type": "boolean",
          "default": true,
          "description": "%c_cpp.configuration.dimInactiveRegions.description%",
          "scope": "resource"
        },
        "C_Cpp.inactiveRegionOpacity": {
          "type:": "number",
          "default": 0.55,
          "description": "%c_cpp.configuration.inactiveRegionOpacity.description%",
          "scope": "resource",
          "minimum": 0.1,
          "maximum": 1
        },
        "C_Cpp.inactiveRegionForegroundColor": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "%c_cpp.configuration.inactiveRegionForegroundColor.description%",
          "scope": "resource"
        },
        "C_Cpp.inactiveRegionBackgroundColor": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "%c_cpp.configuration.inactiveRegionBackgroundColor.description%",
          "scope": "resource"
        },
        "C_Cpp.formatting": {
          "type": "string",
          "enum": [
            "Default",
            "Disabled"
          ],
          "default": "Default",
          "description": "%c_cpp.configuration.formatting.description%",
          "scope": "resource"
        },
        "C_Cpp.navigation.length": {
          "type": "number",
          "default": 60,
          "description": "%c_cpp.configuration.navigation.length.description%",
          "scope": "resource"
        },
        "C_Cpp.loggingLevel": {
          "type": "string",
          "enum": [
            "None",
            "Error",
            "Warning",
            "Information",
            "Debug"
          ],
          "default": "Error",
          "description": "%c_cpp.configuration.loggingLevel.description%",
          "scope": "resource"
        },
        "C_Cpp.autoAddFileAssociations": {
          "type": "boolean",
          "default": true,
          "description": "%c_cpp.configuration.autoAddFileAssociations.description%",
          "scope": "resource"
        },
        "C_Cpp.workspaceParsingPriority": {
          "type": "string",
          "enum": [
            "highest",
            "high",
            "medium",
            "low"
          ],
          "default": "highest",
          "description": "%c_cpp.configuration.workspaceParsingPriority.description%",
          "scope": "resource"
        },
        "C_Cpp.workspaceSymbols": {
          "type": "string",
          "enum": [
            "All",
            "Just My Code"
          ],
          "default": "Just My Code",
          "description": "%c_cpp.configuration.workspaceSymbols.description%",
          "scope": "resource"
        },
        "C_Cpp.exclusionPolicy": {
          "type": "string",
          "enum": [
            "checkFolders",
            "checkFilesAndFolders"
          ],
          "default": "checkFolders",
          "description": "%c_cpp.configuration.exclusionPolicy.description%",
          "scope": "resource"
        },
        "C_Cpp.preferredPathSeparator": {
          "type": "string",
          "enum": [
            "Forward Slash",
            "Backslash"
          ],
          "default": "Forward Slash",
          "description": "%c_cpp.configuration.preferredPathSeparator.description%",
          "scope": "resource"
        },
        "C_Cpp.commentContinuationPatterns": {
          "type": "array",
          "default": [
            "/**"
          ],
          "items": {
            "anyOf": [
              {
                "type": "string",
                "description": "%c_cpp.configuration.commentContinuationPatterns.items.anyof.string.description%"
              },
              {
                "type": "object",
                "properties": {
                  "begin": {
                    "type": "string",
                    "description": "%c_cpp.configuration.commentContinuationPatterns.items.anyof.object.begin.description%"
                  },
                  "continue": {
                    "type": "string",
                    "description": "%c_cpp.configuration.commentContinuationPatterns.items.anyof.object.continue.description%"
                  }
                }
              }
            ]
          },
          "description": "%c_cpp.configuration.commentContinuationPatterns.description%",
          "scope": "resource"
        },
        "C_Cpp.configurationWarnings": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "default": "Enabled",
          "description": "%c_cpp.configuration.configurationWarnings.description%",
          "scope": "resource"
        },
        "C_Cpp.intelliSenseCachePath": {
          "type": "string",
          "default": null,
          "description": "%c_cpp.configuration.intelliSenseCachePath.description%",
          "scope": "resource"
        },
        "C_Cpp.intelliSenseCacheSize": {
          "type": "number",
          "default": 5120,
          "description": "%c_cpp.configuration.intelliSenseCacheSize.description%",
          "scope": "resource",
          "minimum": 0
        },
        "C_Cpp.default.includePath": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          },
          "default": null,
          "description": "%c_cpp.configuration.default.includePath.description%",
          "scope": "resource"
        },
        "C_Cpp.default.defines": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          },
          "default": null,
          "description": "%c_cpp.configuration.default.defines.description%",
          "scope": "resource"
        },
        "C_Cpp.default.macFrameworkPath": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          },
          "default": null,
          "description": "%c_cpp.configuration.default.macFrameworkPath.description%",
          "scope": "resource"
        },
        "C_Cpp.default.windowsSdkVersion": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "%c_cpp.configuration.default.windowsSdkVersion.description%",
          "pattern": "^\\d{2}\\.\\d{1}\\.\\d{5}\\.\\d{1}$|^8\\.1$",
          "scope": "resource"
        },
        "C_Cpp.default.compileCommands": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "%c_cpp.configuration.default.compileCommands.description%",
          "scope": "resource"
        },
        "C_Cpp.default.forcedInclude": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          },
          "default": null,
          "description": "%c_cpp.configuration.default.forcedInclude.description%",
          "scope": "resource"
        },
        "C_Cpp.default.intelliSenseMode": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "msvc-x64",
            "gcc-x64",
            "clang-x64"
          ],
          "default": null,
          "description": "%c_cpp.configuration.default.intelliSenseMode.description%",
          "scope": "resource"
        },
        "C_Cpp.default.compilerPath": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "%c_cpp.configuration.default.compilerPath.description%",
          "scope": "resource"
        },
        "C_Cpp.default.compilerArgs": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          },
          "default": null,
          "description": "%c_cpp.configuration.default.compilerArgs.description%",
          "scope": "resource"
        },
        "C_Cpp.default.cStandard": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "c89",
            "c99",
            "c11"
          ],
          "default": null,
          "description": "%c_cpp.configuration.default.cStandard.description%",
          "scope": "resource"
        },
        "C_Cpp.default.cppStandard": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "c++98",
            "c++03",
            "c++11",
            "c++14",
            "c++17",
            "c++20"
          ],
          "default": null,
          "description": "%c_cpp.configuration.default.cppStandard.description%",
          "scope": "resource"
        },
        "C_Cpp.default.configurationProvider": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "%c_cpp.configuration.default.configurationProvider.description%",
          "scope": "resource"
        },
        "C_Cpp.default.browse.path": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          },
          "default": null,
          "description": "%c_cpp.configuration.default.browse.path.description%",
          "scope": "resource"
        },
        "C_Cpp.default.browse.databaseFilename": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "%c_cpp.configuration.default.browse.databaseFilename.description%",
          "scope": "resource"
        },
        "C_Cpp.default.browse.limitSymbolsToIncludedHeaders": {
          "type": "boolean",
          "default": true,
          "description": "%c_cpp.configuration.default.browse.limitSymbolsToIncludedHeaders.description%",
          "scope": "resource"
        },
        "C_Cpp.default.systemIncludePath": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          },
          "default": null,
          "description": "%c_cpp.configuration.default.systemIncludePath.description%",
          "scope": "resource"
        },
        "C_Cpp.default.enableConfigurationSquiggles": {
          "type": [
            "boolean",
            "null"
          ],
          "default": null,
          "description": "%c_cpp.configuration.default.enableConfigurationSquiggles.description%",
          "scope": "resource"
        },
        "C_Cpp.updateChannel": {
          "type": "string",
          "enum": [
            "Default",
            "Insiders"
          ],
          "default": "Default",
          "description": "%c_cpp.configuration.updateChannel.description%",
          "scope": "resource"
        },
        "C_Cpp.suggestSnippets": {
          "type": "boolean",
          "default": true,
          "description": "%c_cpp.configuration.suggestSnippets.description%",
          "scope": "resource"
        },
        "C_Cpp.enhancedColorization": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "default": "Enabled",
          "description": "%c_cpp.configuration.enhancedColorization.description%",
          "scope": "resource"
        },
        "C_Cpp.vcpkg.enabled": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "%c_cpp.configuration.vcpkg.enabled.markdownDescription%",
          "scope": "resource"
        }
      }
    },
    "commands": [
      {
        "command": "C_Cpp.ConfigurationSelect",
        "title": "%c_cpp.command.configurationSelect.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.ConfigurationProviderSelect",
        "title": "%c_cpp.command.configurationProviderSelect.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.ConfigurationEditJSON",
        "title": "%c_cpp.command.configurationEditJSON.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.ConfigurationEditUI",
        "title": "%c_cpp.command.configurationEditUI.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.GoToDeclaration",
        "title": "%c_cpp.command.goToDeclaration.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.PeekDeclaration",
        "title": "%c_cpp.command.peekDeclaration.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.SwitchHeaderSource",
        "title": "%c_cpp.command.switchHeaderSource.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.Navigate",
        "title": "%c_cpp.command.navigate.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.EnableErrorSquiggles",
        "title": "%c_cpp.command.enableErrorSquiggles.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.DisableErrorSquiggles",
        "title": "%c_cpp.command.disableErrorSquiggles.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.ToggleIncludeFallback",
        "title": "%c_cpp.command.toggleIncludeFallback.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.ToggleDimInactiveRegions",
        "title": "%c_cpp.command.toggleDimInactiveRegions.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.ShowReleaseNotes",
        "title": "%c_cpp.command.showReleaseNotes.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.ResetDatabase",
        "title": "%c_cpp.command.resetDatabase.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.PauseParsing",
        "title": "%c_cpp.command.pauseParsing.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.ResumeParsing",
        "title": "%c_cpp.command.resumeParsing.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.ShowParsingCommands",
        "title": "%c_cpp.command.showParsingCommands.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.TakeSurvey",
        "title": "%c_cpp.command.takeSurvey.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.BuildAndDebugActiveFile",
        "title": "%c_cpp.command.buildAndDebugActiveFile.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.LogDiagnostics",
        "title": "%c_cpp.command.logDiagnostics.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.RescanWorkspace",
        "title": "%c_cpp.command.rescanWorkspace.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.VcpkgClipboardInstallSuggested",
        "title": "%c_cpp.command.vcpkgClipboardInstallSuggested.title%",
        "category": "C/C++"
      },
      {
        "command": "C_Cpp.VcpkgOnlineHelpSuggested",
        "title": "%c_cpp.command.vcpkgOnlineHelpSuggested.title%",
        "category": "C/C++"
      }
    ],
    "keybindings": [
      {
        "command": "C_Cpp.GoToDeclaration",
        "key": "Ctrl+F12",
        "when": "editorTextFocus && editorLangId == 'cpp'"
      },
      {
        "command": "C_Cpp.GoToDeclaration",
        "key": "Ctrl+F12",
        "when": "editorTextFocus && editorLangId == 'c'"
      },
      {
        "command": "C_Cpp.PeekDeclaration",
        "key": "Ctrl+Alt+F12",
        "when": "editorTextFocus && editorLangId == 'cpp'"
      },
      {
        "command": "C_Cpp.PeekDeclaration",
        "key": "Ctrl+Alt+F12",
        "when": "editorTextFocus && editorLangId == 'c'"
      },
      {
        "command": "C_Cpp.SwitchHeaderSource",
        "key": "Alt+O",
        "when": "editorTextFocus && editorLangId == 'cpp'"
      },
      {
        "command": "C_Cpp.SwitchHeaderSource",
        "key": "Alt+O",
        "when": "editorTextFocus && editorLangId == 'c'"
      },
      {
        "command": "C_Cpp.Navigate",
        "key": "Alt+N",
        "when": "editorTextFocus && editorLangId == 'cpp'"
      },
      {
        "command": "C_Cpp.Navigate",
        "key": "Alt+N",
        "when": "editorTextFocus && editorLangId == 'c'"
      }
    ],
    "debuggers": [
      {
        "type": "cppdbg",
        "label": "C++ (GDB/LLDB)",
        "enableBreakpointsFor": {
          "languageIds": [
            "c",
            "cpp"
          ]
        },
        "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217",
        "variables": {
          "pickProcess": "extension.pickNativeProcess",
          "pickRemoteProcess": "extension.pickRemoteNativeProcess"
        },
        "configurationAttributes": {
          "launch": {
            "type": "object",
            "default": {},
            "required": [
              "program"
            ],
            "properties": {
              "program": {
                "type": "string",
                "description": "Full path to program executable.",
                "default": "${workspaceRoot}/a.out"
              },
              "args": {
                "type": "array",
                "description": "Command line arguments passed to the program.",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "type": {
                "type": "string",
                "description": "The type of the engine. Must be \"cppdbg\".",
                "default": "cppdbg"
              },
              "targetArchitecture": {
                "type": "string",
                "description": "The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.",
                "default": "x64"
              },
              "cwd": {
                "type": "string",
                "description": "The working directory of the target",
                "default": "."
              },
              "setupCommands": {
                "type": "array",
                "description": "One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].",
                "items": {
                  "type": "object",
                  "default": {},
                  "properties": {
                    "text": {
                      "type": "string",
                      "description": "The debugger command to execute.",
                      "default": ""
                    },
                    "description": {
                      "type": "string",
                      "description": "Optional description for the command.",
                      "default": ""
                    },
                    "ignoreFailures": {
                      "type": "boolean",
                      "description": "If true, failures from the command should be ignored. Default value is false.",
                      "default": false
                    }
                  }
                },
                "default": []
              },
              "customLaunchSetupCommands": {
                "type": "array",
                "description": "If provided, this replaces the default commands used to launch a target with some other commands. For example, this can be \"-target-attach\" in order to attach to a target process. An empty command list replaces the launch commands with nothing, which can be useful if the debugger is being provided launch options as command line options. Example: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].",
                "items": {
                  "type": "object",
                  "default": {},
                  "properties": {
                    "text": {
                      "type": "string",
                      "description": "The debugger command to execute.",
                      "default": ""
                    },
                    "description": {
                      "type": "string",
                      "description": "Optional description for the command.",
                      "default": ""
                    },
                    "ignoreFailures": {
                      "type": "boolean",
                      "description": "If true, failures from the command should be ignored. Default value is false.",
                      "default": false
                    }
                  }
                },
                "default": []
              },
              "launchCompleteCommand": {
                "enum": [
                  "exec-run",
                  "exec-continue",
                  "None"
                ],
                "description": "The command to execute after the debugger is fully setup in order to cause the target process to run. Allowed values are \"exec-run\", \"exec-continue\", \"None\". The default value is \"exec-run\".",
                "default": "exec-run"
              },
              "visualizerFile": {
                "type": "string",
                "description": ".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.",
                "default": ""
              },
              "showDisplayString": {
                "type": "boolean",
                "description": "When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.",
                "default": true
              },
              "environment": {
                "type": "array",
                "description": "Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].",
                "items": {
                  "type": "object",
                  "default": {},
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "default": []
              },
              "envFile": {
                "type": "string",
                "description": "Absolute path to a file containing environment variable definitions. This file has key value pairs separated by an equals sign per line. E.g. KEY=VALUE",
                "default": "${workspaceFolder}/.env"
              },
              "additionalSOLibSearchPath": {
                "type": "string",
                "description": "Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".",
                "default": ""
              },
              "MIMode": {
                "type": "string",
                "description": "Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".",
                "default": "gdb"
              },
              "miDebuggerPath": {
                "type": "string",
                "description": "The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.",
                "default": "/usr/bin/gdb"
              },
              "miDebuggerArgs": {
                "type": "string",
                "description": "Arguments for the mi debugger (such as gdb) to use. When unspecified.",
                "default": ""
              },
              "miDebuggerServerAddress": {
                "type": "string",
                "description": "Network address of the MI Debugger Server to connect to (example: localhost:1234).",
                "default": "serveraddress:port"
              },
              "stopAtEntry": {
                "type": "boolean",
                "description": "Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.",
                "default": false
              },
              "debugServerPath": {
                "type": "string",
                "description": "Optional full path to debug server to launch. Defaults to null.",
                "default": ""
              },
              "debugServerArgs": {
                "type": "string",
                "description": "Optional debug server args. Defaults to null.",
                "default": ""
              },
              "serverStarted": {
                "type": "string",
                "description": "Optional server-started pattern to look for in the debug server output. Defaults to null.",
                "default": ""
              },
              "filterStdout": {
                "type": "boolean",
                "description": "Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.",
                "default": true
              },
              "filterStderr": {
                "type": "boolean",
                "description": "Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.",
                "default": false
              },
              "serverLaunchTimeout": {
                "type": "integer",
                "description": "Optional time, in milliseconds, for the debugger to wait for the debugServer to start up. Default is 10000.",
                "default": "10000"
              },
              "coreDumpPath": {
                "type": "string",
                "description": "Optional full path to a core dump file for the specified program. Defaults to null.",
                "default": ""
              },
              "externalConsole": {
                "type": "boolean",
                "description": "If true, a console is launched for the debuggee. If false, on Linux and Windows, it will appear in the Integrated Console.",
                "default": false
              },
              "avoidWindowsConsoleRedirection": {
                "type": "boolean",
                "description": "If true, disables debuggee console redirection that is required for Integrated Terminal support.",
                "default": false
              },
              "sourceFileMap": {
                "type": "object",
                "description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
                "default": {
                  "<source-path>": "<target-path>"
                }
              },
              "logging": {
                "description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
                "type": "object",
                "default": {},
                "properties": {
                  "exceptions": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
                    "default": true
                  },
                  "moduleLoad": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
                    "default": true
                  },
                  "programOutput": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
                    "default": true
                  },
                  "engineLogging": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.",
                    "default": false
                  },
                  "trace": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
                    "default": false
                  },
                  "traceResponse": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.",
                    "default": false
                  }
                }
              },
              "pipeTransport": {
                "description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).",
                "type": "object",
                "default": {
                  "pipeCwd": "/usr/bin",
                  "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                  "pipeArgs": [],
                  "debuggerPath": "The full path to the debugger on the target machine, for example /usr/bin/gdb."
                },
                "properties": {
                  "pipeCwd": {
                    "type": "string",
                    "description": "The fully qualified path to the working directory for the pipe program.",
                    "default": "/usr/bin"
                  },
                  "pipeProgram": {
                    "type": "string",
                    "description": "The fully qualified pipe command to execute.",
                    "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                  },
                  "pipeArgs": {
                    "type": "array",
                    "description": "Command line arguments passed to the pipe program to configure the connection.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "debuggerPath": {
                    "type": "string",
                    "description": "The full path to the debugger on the target machine, for example /usr/bin/gdb.",
                    "default": "The full path to the debugger on the target machine, for example /usr/bin/gdb."
                  },
                  "pipeEnv": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Environment variables passed to the pipe program.",
                    "default": {}
                  }
                }
              }
            }
          },
          "attach": {
            "type": "object",
            "default": {},
            "required": [
              "program",
              "processId"
            ],
            "properties": {
              "program": {
                "type": "string",
                "description": "Full path to program executable.",
                "default": "${workspaceRoot}/a.out"
              },
              "type": {
                "type": "string",
                "description": "The type of the engine. Must be \"cppdbg\".",
                "default": "cppdbg"
              },
              "targetArchitecture": {
                "type": "string",
                "description": "The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.",
                "default": "x64"
              },
              "visualizerFile": {
                "type": "string",
                "description": ".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.",
                "default": ""
              },
              "showDisplayString": {
                "type": "boolean",
                "description": "When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.",
                "default": true
              },
              "additionalSOLibSearchPath": {
                "type": "string",
                "description": "Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".",
                "default": ""
              },
              "MIMode": {
                "type": "string",
                "description": "Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".",
                "default": "gdb"
              },
              "miDebuggerPath": {
                "type": "string",
                "description": "The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.",
                "default": "/usr/bin/gdb"
              },
              "miDebuggerServerAddress": {
                "type": "string",
                "description": "Network address of the MI Debugger Server to connect to (example: localhost:1234).",
                "default": "serveraddress:port"
              },
              "processId": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Optional process id to attach the debugger to. Use \"${command:pickProcess}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
                    "default": "${command:pickProcess}"
                  },
                  {
                    "type": "integer",
                    "description": "Optional process id to attach the debugger to. Use \"${command:pickProcess}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
                    "default": 0
                  }
                ]
              },
              "filterStdout": {
                "type": "boolean",
                "description": "Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.",
                "default": true
              },
              "filterStderr": {
                "type": "boolean",
                "description": "Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.",
                "default": false
              },
              "sourceFileMap": {
                "type": "object",
                "description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
                "default": {
                  "<source-path>": "<target-path>"
                }
              },
              "logging": {
                "description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
                "type": "object",
                "default": {},
                "properties": {
                  "exceptions": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
                    "default": true
                  },
                  "moduleLoad": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
                    "default": true
                  },
                  "programOutput": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
                    "default": true
                  },
                  "engineLogging": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.",
                    "default": false
                  },
                  "trace": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
                    "default": false
                  },
                  "traceResponse": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.",
                    "default": false
                  }
                }
              },
              "pipeTransport": {
                "description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).",
                "type": "object",
                "default": {
                  "pipeCwd": "/usr/bin",
                  "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                  "pipeArgs": [],
                  "debuggerPath": "The full path to the debugger on the target machine, for example /usr/bin/gdb."
                },
                "properties": {
                  "pipeCwd": {
                    "type": "string",
                    "description": "The fully qualified path to the working directory for the pipe program.",
                    "default": "/usr/bin"
                  },
                  "pipeProgram": {
                    "type": "string",
                    "description": "The fully qualified pipe command to execute.",
                    "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                  },
                  "pipeArgs": {
                    "type": "array",
                    "description": "Command line arguments passed to the pipe program to configure the connection.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "debuggerPath": {
                    "type": "string",
                    "description": "The full path to the debugger on the target machine, for example /usr/bin/gdb.",
                    "default": "The full path to the debugger on the target machine, for example /usr/bin/gdb."
                  },
                  "pipeEnv": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Environment variables passed to the pipe program.",
                    "default": {}
                  }
                }
              },
              "setupCommands": {
                "type": "array",
                "description": "One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].",
                "items": {
                  "type": "object",
                  "default": {},
                  "properties": {
                    "text": {
                      "type": "string",
                      "description": "The debugger command to execute.",
                      "default": ""
                    },
                    "description": {
                      "type": "string",
                      "description": "Optional description for the command.",
                      "default": ""
                    },
                    "ignoreFailures": {
                      "type": "boolean",
                      "description": "If true, failures from the command should be ignored. Default value is false.",
                      "default": false
                    }
                  }
                },
                "default": []
              }
            }
          }
        }
      },
      {
        "type": "cppvsdbg",
        "label": "C++ (Windows)",
        "enableBreakpointsFor": {
          "languageIds": [
            "c",
            "cpp"
          ]
        },
        "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217",
        "variables": {
          "pickProcess": "extension.pickNativeProcess"
        },
        "configurationAttributes": {
          "launch": {
            "type": "object",
            "default": {},
            "required": [
              "program",
              "cwd"
            ],
            "properties": {
              "program": {
                "type": "string",
                "description": "Full path to program executable.",
                "default": "${workspaceRoot}/program.exe"
              },
              "args": {
                "type": "array",
                "description": "Command line arguments passed to the program.",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "type": {
                "type": "string",
                "description": "The type of the engine. Must be \"cppvsdbg\".",
                "default": "cppvsdbg"
              },
              "cwd": {
                "type": "string",
                "description": "The working directory of the target.",
                "default": "${workspaceRoot}"
              },
              "environment": {
                "type": "array",
                "description": "Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].",
                "items": {
                  "type": "object",
                  "default": {},
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "default": []
              },
              "envFile": {
                "type": "string",
                "description": "Absolute path to a file containing environment variable definitions. This file has key value pairs separated by an equals sign per line. E.g. KEY=VALUE",
                "default": "${workspaceFolder}/.env"
              },
              "symbolSearchPath": {
                "type": "string",
                "description": "Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".",
                "default": ""
              },
              "stopAtEntry": {
                "type": "boolean",
                "description": "Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.",
                "default": false
              },
              "dumpPath": {
                "type": "string",
                "description": "Optional full path to a dump file for the specified program. Example: \"c:\\temp\\app.dmp\". Defaults to null.",
                "default": ""
              },
              "visualizerFile": {
                "type": "string",
                "description": ".natvis file to be used when debugging this process.",
                "default": ""
              },
              "externalConsole": {
                "type": "boolean",
                "description": "If true, a console is launched for the debuggee. If false, no console is launched.",
                "default": false
              },
              "sourceFileMap": {
                "type": "object",
                "description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
                "default": {
                  "<source-path>": "<target-path>"
                }
              },
              "enableDebugHeap": {
                "type": "boolean",
                "description": "If false, the process will be launched with debug heap disabled. This sets the environment variable '_NO_DEBUG_HEAP' to '1'.",
                "default": false
              },
              "logging": {
                "type": "object",
                "description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
                "default": {},
                "properties": {
                  "exceptions": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
                    "default": true
                  },
                  "moduleLoad": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
                    "default": true
                  },
                  "programOutput": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
                    "default": true
                  },
                  "engineLogging": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether diagnostic debug engine messages should be logged to the Debug Console. Defaults to false.",
                    "default": false
                  }
                }
              }
            }
          },
          "attach": {
            "type": "object",
            "default": {},
            "required": [
              "processId"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of the engine. Must be \"cppvsdbg\".",
                "default": "cppvsdbg"
              },
              "symbolSearchPath": {
                "type": "string",
                "description": "Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".",
                "default": ""
              },
              "processId": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Optional process id to attach the debugger to. Use \"${command:pickProcess}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
                    "default": "${command:pickProcess}"
                  },
                  {
                    "type": "integer",
                    "description": "Optional process id to attach the debugger to. Use \"${command:pickProcess}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
                    "default": 0
                  }
                ]
              },
              "visualizerFile": {
                "type": "string",
                "description": ".natvis file to be used when debugging this process.",
                "default": ""
              },
              "sourceFileMap": {
                "type": "object",
                "description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
                "default": {
                  "<source-path>": "<target-path>"
                }
              },
              "logging": {
                "type": "object",
                "description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
                "default": {},
                "properties": {
                  "exceptions": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
                    "default": true
                  },
                  "moduleLoad": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
                    "default": true
                  },
                  "programOutput": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
                    "default": true
                  },
                  "trace": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
                    "default": false
                  }
                }
              }
            }
          }
        }
      }
    ],

    "menus": {
      "editor/context": [
        {
          "when": "editorLangId == c",
          "command": "C_Cpp.GoToDeclaration",
          "group": "navigation@2"
        },
        {
          "when": "editorLangId == cpp",
          "command": "C_Cpp.GoToDeclaration",
          "group": "navigation@2"
        },
        {
          "when": "editorLangId == c",
          "command": "C_Cpp.PeekDeclaration",
          "group": "navigation@3"
        },
        {
          "when": "editorLangId == cpp",
          "command": "C_Cpp.PeekDeclaration",
          "group": "navigation@3"
        },
        {
          "when": "editorLangId == c",
          "command": "C_Cpp.SwitchHeaderSource",
          "group": "other1_navigation@1"
        },
        {
          "when": "editorLangId == cpp",
          "command": "C_Cpp.SwitchHeaderSource",
          "group": "other1_navigation@1"
        },
        {
          "when": "editorLangId == c",
          "command": "C_Cpp.Navigate",
          "group": "other1_navigation@2"
        },
        {
          "when": "editorLangId == cpp",
          "command": "C_Cpp.Navigate",
          "group": "other1_navigation@2"
        },
        {
          "when": "editorLangId == c",
          "command": "workbench.action.gotoSymbol",
          "group": "other1_navigation@3"
        },
        {
          "when": "editorLangId == cpp",
          "command": "workbench.action.gotoSymbol",
          "group": "other1_navigation@3"
        },
        {
          "when": "editorLangId == c",
          "command": "workbench.action.showAllSymbols",
          "group": "other1_navigation@4"
        },
        {
          "when": "editorLangId == cpp",
          "command": "workbench.action.showAllSymbols",
          "group": "other1_navigation@4"
        },
        {
          "when": "editorLangId == cpp",
          "command": "C_Cpp.BuildAndDebugActiveFile",
          "group": "other2_debug@1"
        },
        {
          "when": "editorLangId == c",
          "command": "C_Cpp.BuildAndDebugActiveFile",
          "group": "other2_debug@1"
        }
      ]
    },
    "configurationDefaults": {
      "[cpp]": {
        "editor.wordBasedSuggestions": false
      },
      "[c]": {
        "editor.wordBasedSuggestions": false
      }
    }
  },
  "scripts": {
    "compile": "npm run prepublishjs && npm run generate-native-strings && npm run localization-generate && webpack --mode production --vscode-nls",
    "compileDev": "npm run prepublishjs && npm run generate-native-strings && webpack --mode development",
    "generateOptionsSchema": "gulp generateOptionsSchema",
    "generate-native-strings": "gulp generate-native-strings",
    "localization-export.temp": "npm run generate-native-strings && gulp localization-export",
    "localization-export": "npm run prepublishjs && npm run generate-native-strings && gulp localization-export",
    "localization-generate": "gulp localization-generate",
    "localization-import": "gulp localization-import",
    "postinstall": "node ./node_modules/vscode/bin/install",
    "prepublishjs": "node ./tools/prepublish.js",
    "pretest": "tsc -p test.tsconfig.json",
    "pr-check": "gulp pr-check",
    "tslint": "gulp tslint",
    "unitTests": "gulp unitTests",
    "vscode:prepublish": "npm run compile",
    "watch": "webpack --watch --mode development"
  },
  "devDependencies": {
    "@types/minimatch": "^3.0.3",
    "@types/mkdirp": "^0.5.2",
    "@types/mocha": "^5.2.7",
    "@types/node": "^12.6.3",
    "@types/plist": "^3.0.2",
    "@types/tmp": "^0.1.0",
    "@types/webpack": "^4.4.35",
    "@types/yauzl": "^2.9.1",
    "async-child-process": "^1.1.1",
    "await-notify": "^1.0.1",
    "event-stream": "^4.0.1",
    "gulp": "^4.0.2",
    "gulp-env": "^0.4.0",
    "gulp-filter": "^6.0.0",
    "gulp-mocha": "^6.0.0",
    "gulp-sourcemaps": "^2.6.5",
    "gulp-tslint": "^8.1.4",
    "gulp-typescript": "^5.0.1",
    "minimist": "^1.2.0",
    "parse5": "^5.1.0",
    "parse5-traverse": "^1.0.3",
    "ts-loader": "^6.0.4",
    "tslint": "^5.18.0",
    "tslint-microsoft-contrib": "^6.2.0",
    "tslint-no-unused-expression-chai": "^0.1.4",
    "typescript": "^3.5.3",
    "vrsource-tslint-rules": "^6.0.0",
    "vscode": "^1.1.35",
    "vscode-nls-dev": "^3.2.6",
    "webpack": "^4.35.3",
    "webpack-cli": "^3.3.6"
  },
  "dependencies": {
    "escape-string-regexp": "^2.0.0",
    "http-proxy-agent": "^2.1.0",
    "https-proxy-agent": "^2.2.2",
    "jsonc-parser": "^2.1.0",
    "minimatch": "^3.0.4",
    "mkdirp": "^0.5.1",
    "plist": "^2.0.1",
    "tmp": "^0.1.0",
    "vscode-cpptools": "^3.0.0",
    "vscode-debugadapter": "^1.35.0",
    "vscode-debugprotocol": "^1.35.0",
    "vscode-extension-telemetry": "^0.1.2",
    "vscode-languageclient": "^5.2.1",
    "vscode-nls": "^4.1.1",
    "yauzl": "^2.10.0"
  },
  "runtimeDependencies": [
    {
      "description": "C/C++ language components (Linux / x86_64)",
      "url": "https://go.microsoft.com/fwlink/?linkid=2098277",
      "platforms": [
        "linux"
      ],
      "architectures": [
        "x86_64"
      ],
      "binaries": [
        "./bin/Microsoft.VSCode.CPP.Extension.linux",
        "./bin/Microsoft.VSCode.CPP.IntelliSense.Msvc.linux"
      ]
    },
    {
      "description": "C/C++ language components (Linux / x86)",
      "url": "https://go.microsoft.com/fwlink/?linkid=2098276",
      "platforms": [
        "linux"
      ],
      "architectures": [
        "x86",
        "i686",
        "i386"
      ],
      "binaries": [
        "./bin/Microsoft.VSCode.CPP.Extension.linux",
        "./bin/Microsoft.VSCode.CPP.IntelliSense.Msvc.linux"
      ]
    },
    {
      "description": "C/C++ language components (OS X)",
      "url": "https://go.microsoft.com/fwlink/?linkid=2098195",
      "platforms": [
        "darwin"
      ],
      "binaries": [
        "./bin/Microsoft.VSCode.CPP.Extension.darwin",
        "./bin/Microsoft.VSCode.CPP.IntelliSense.Msvc.darwin"
      ]
    },
    {
      "description": "C/C++ language components (Windows)",
      "url": "https://go.microsoft.com/fwlink/?linkid=2098194",
      "platforms": [
        "win32"
      ],
      "binaries": []
    },
    {
      "description": "ClangFormat (Linux / x86_64)",
      "url": "https://go.microsoft.com/fwlink/?LinkID=872607",
      "platforms": [
        "linux"
      ],
      "architectures": [
        "x86_64"
      ],
      "binaries": [
        "./LLVM/bin/clang-format"
      ]
    },
    {
      "description": "ClangFormat (Linux / x86)",
      "url": "https://go.microsoft.com/fwlink/?LinkID=872608",
      "platforms": [
        "linux"
      ],
      "architectures": [
        "x86",
        "i686",
        "i386"
      ],
      "binaries": [
        "./LLVM/bin/clang-format"
      ]
    },
    {
      "description": "ClangFormat (OS X)",
      "url": "https://go.microsoft.com/fwlink/?LinkID=872609",
      "platforms": [
        "darwin"
      ],
      "binaries": [
        "./LLVM/bin/clang-format.darwin"
      ]
    },
    {
      "description": "ClangFormat (Windows)",
      "url": "https://go.microsoft.com/fwlink/?LinkID=872610",
      "platforms": [
        "win32"
      ],
      "binaries": []
    },
    {
      "description": "Mono Framework Assemblies",
      "url": "https://go.microsoft.com/fwlink/?LinkId=2027135",
      "platforms": [
        "linux",
        "darwin"
      ],
      "binaries": []
    },
    {
      "description": "Mono Runtime (Linux / x86)",
      "url": "https://go.microsoft.com/fwlink/?LinkId=2027410",
      "platforms": [
        "linux"
      ],
      "architectures": [
        "x86",
        "i686",
        "i386"
      ],
      "binaries": [
        "./debugAdapters/mono.linux-x86"
      ]
    },
    {
      "description": "Mono Runtime (Linux / x86_64)",
      "url": "https://go.microsoft.com/fwlink/?LinkId=2027416",
      "platforms": [
        "linux"
      ],
      "architectures": [
        "x86_64"
      ],
      "binaries": [
        "./debugAdapters/mono.linux-x86_64"
      ]
    },
    {
      "description": "Mono Runtime (OS X)",
      "url": "https://go.microsoft.com/fwlink/?LinkId=2027403",
      "platforms": [
        "darwin"
      ],
      "binaries": [
        "./debugAdapters/mono.osx"
      ]
    },
    {
      "description": "LLDB 3.8.0 (OS X)",
      "url": "https://go.microsoft.com/fwlink/?LinkID=817244",
      "platforms": [
        "darwin"
      ],
      "binaries": [
        "./debugAdapters/lldb/bin/debugserver",
        "./debugAdapters/lldb/bin/lldb-mi",
        "./debugAdapters/lldb/bin/lldb-argdumper",
        "./debugAdapters/lldb/bin/lldb-launcher"
      ]
    },
    {
      "description": "Visual Studio Windows Debugger",
      "url": "https://go.microsoft.com/fwlink/?linkid=2082216",
      "platforms": [
        "win32"
      ],
      "binaries": []
    }
  ]
}